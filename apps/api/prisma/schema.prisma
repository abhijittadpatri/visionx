generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     UserTenant[]
}

model User {
  id        String        @id @default(cuid())
  email     String        @unique
  password  String
  fullName  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  memberships UserTenant[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique // e.g., "OWNER", "ADMIN", "STAFF"
  users UserTenant[]
}

model UserTenant {
  id        String   @id @default(cuid())
  userId    String
  tenantId  String
  roleId    Int
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@unique([userId, tenantId])
}

model Patient {
  id          String    @id @default(cuid())
  tenantId    String
  firstName   String
  lastName    String
  email       String?   @db.Citext
  phone       String?
  dob         DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  prescriptions Prescription[]
  orders      Order[]

  @@index([tenantId])
  @@index([tenantId, lastName])
}

model Prescription {
  id            String   @id @default(cuid())
  tenantId      String
  patientId     String
  sphereLeft    Float?
  sphereRight   Float?
  cylinderLeft  Float?
  cylinderRight Float?
  axisLeft      Int?
  axisRight     Int?
  addLeft       Float?
  addRight      Float?
  pd            Float?   // pupillary distance
  issuedAt      DateTime @default(now())
  expiresAt     DateTime?
  notes         String?

  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  patient       Patient  @relation(fields: [patientId], references: [id])

  @@index([tenantId])
  @@index([tenantId, patientId])
}

model Product {
  id          String   @id @default(cuid())
  tenantId    String
  sku         String
  name        String
  category    ProductCategory
  priceCents  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  orderItems  OrderItem[]

  @@unique([tenantId, sku])
  @@index([tenantId, category])
}

enum ProductCategory {
  FRAME
  LENS
  ACCESSORY
  SERVICE
}

model Order {
  id            String      @id @default(cuid())
  tenantId      String
  patientId     String
  prescriptionId String?
  status        OrderStatus @default(PENDING)
  totalCents    Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  tenant        Tenant      @relation(fields: [tenantId], references: [id])
  patient       Patient     @relation(fields: [patientId], references: [id])
  prescription  Prescription? @relation(fields: [prescriptionId], references: [id])
  items         OrderItem[]

  @@index([tenantId])
  @@index([tenantId, patientId])
  @@index([tenantId, status])
}

model OrderItem {
  id         String  @id @default(cuid())
  tenantId   String
  orderId    String
  productId  String
  quantity   Int     @default(1)
  priceCents Int     // snapshot of price at purchase

  tenant     Tenant  @relation(fields: [tenantId], references: [id])
  order      Order   @relation(fields: [orderId], references: [id])
  product    Product @relation(fields: [productId], references: [id])

  @@index([tenantId, orderId])
  @@index([tenantId, productId])
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  READY
  COMPLETED
  CANCELLED
}
